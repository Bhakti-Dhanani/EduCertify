generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  name           String
  email          String           @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  role           Role             @default(STUDENT)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  accounts       Account[]
  assignments    Assignment[]
  certificates   Certificate[]
  createdCourses Course[]         @relation("CourseCreator")
  enrolledIn     Enrollment[]
  forumReplies   ForumReply[]
  forumThreads   ForumThread[]
  progress       ModuleProgress[]
  quizAttempts   QuizAttempt[]
  sessions       Session[]
  submissions    Submission[]
  instructorFor  Course[]         @relation("CourseInstructor")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id           String        @id @default(cuid())
  title        String
  description  String
  thumbnail    String?
  price        Decimal?      @db.Decimal(10, 2)
  published    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  creatorId    String
  assignments  Assignment[]
  certificates Certificate[]
  creator      User          @relation("CourseCreator", fields: [creatorId], references: [id])
  enrollments  Enrollment[]
  forumThreads ForumThread[]
  modules      Module[]
  quizzes      Quiz[]
  instructors  User[]        @relation("CourseInstructor")
}

model Enrollment {
  id          String    @id @default(cuid())
  courseId    String
  userId      String
  enrolledAt  DateTime  @default(now())
  completed   Boolean   @default(false)
  completedAt DateTime?
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId])
}

model Module {
  id        String           @id @default(cuid())
  title     String
  type      ModuleType
  content   String?
  courseId  String
  order     Int
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  course    Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress  ModuleProgress[]
  quizzes   Quiz[]
}

model ModuleProgress {
  id          String    @id @default(cuid())
  moduleId    String
  userId      String
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  module      Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([moduleId, userId])
}

model Assignment {
  id          String       @id @default(cuid())
  title       String
  description String
  dueDate     DateTime?
  courseId    String
  creatorId   String
  moduleId    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  creator     User         @relation(fields: [creatorId], references: [id])
  submissions Submission[]
}

model Submission {
  id           String     @id @default(cuid())
  assignmentId String
  userId       String
  fileUrl      String?
  content      String?
  grade        Float?
  feedback     String?
  submittedAt  DateTime   @default(now())
  gradedAt     DateTime?
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Quiz {
  id           String         @id @default(cuid())
  title        String
  description  String?
  courseId     String
  timeLimit    Int?
  passingScore Float?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  moduleId     String?
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module       Module?        @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  attempts     QuizAttempt[]
  questions    QuizQuestion[]
}

model QuizQuestion {
  id            String       @id @default(cuid())
  quizId        String
  question      String
  type          QuestionType
  options       Json?
  correctAnswer String?
  points        Int          @default(1)
  order         Int
  answers       QuizAnswer[]
  quiz          Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model QuizAttempt {
  id          String       @id @default(cuid())
  quizId      String
  userId      String
  score       Float?
  startedAt   DateTime     @default(now())
  completedAt DateTime?
  answers     QuizAnswer[]
  quiz        Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model QuizAnswer {
  id            String       @id @default(cuid())
  attemptId     String
  questionId    String
  userAnswer    String
  isCorrect     Boolean?
  pointsAwarded Float?
  attempt       QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question      QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model ForumThread {
  id        String       @id @default(cuid())
  title     String
  content   String
  courseId  String
  authorId  String
  pinned    Boolean      @default(false)
  locked    Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  replies   ForumReply[]
  author    User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  course    Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model ForumReply {
  id        String      @id @default(cuid())
  content   String
  threadId  String
  authorId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  author    User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  thread    ForumThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
}

model Certificate {
  id         String               @id @default(cuid())
  userId     String
  courseId   String
  templateId String?
  pdf        String?
  issueDate  DateTime             @default(now())
  course     Course               @relation(fields: [courseId], references: [id], onDelete: Cascade)
  template   CertificateTemplate? @relation(fields: [templateId], references: [id])
  user       User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CertificateTemplate {
  id           String        @id @default(cuid())
  name         String
  template     Json
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  certificates Certificate[]
}

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum ModuleType {
  VIDEO
  TEXT
  PDF
  QUIZ
  ASSIGNMENT
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
  FILE_UPLOAD
}
