// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USERS & AUTHENTICATION
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts       Account[]
  sessions       Session[]
  instructorFor  Course[]         @relation("CourseInstructor")
  enrolledIn     Enrollment[]
  createdCourses Course[]         @relation("CourseCreator")
  assignments    Assignment[]
  submissions    Submission[]
  forumThreads   ForumThread[]
  forumReplies   ForumReply[]
  certificates   Certificate[]
  progress       ModuleProgress[]
  quizAttempts   QuizAttempt[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

// COURSES & MODULES
model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  thumbnail   String?
  price       Decimal? @db.Decimal(10, 2)
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorId   String

  // Relations
  creator      User          @relation("CourseCreator", fields: [creatorId], references: [id])
  instructors  User[]        @relation("CourseInstructor")
  modules      Module[]
  enrollments  Enrollment[]
  assignments  Assignment[]
  forumThreads ForumThread[]
  certificates Certificate[]
  quizzes      Quiz[]
}

model Enrollment {
  id          String    @id @default(cuid())
  courseId    String
  userId      String
  enrolledAt  DateTime  @default(now())
  completed   Boolean   @default(false)
  completedAt DateTime?

  // Relations
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId])
}

model Module {
  id        String     @id @default(cuid())
  title     String
  type      ModuleType
  content   String?
  courseId  String
  order     Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  course   Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress ModuleProgress[]
  quizzes  Quiz[]
}

model ModuleProgress {
  id          String    @id @default(cuid())
  moduleId    String
  userId      String
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([moduleId, userId])
}

enum ModuleType {
  VIDEO
  TEXT
  PDF
  QUIZ
  ASSIGNMENT
}

// ASSIGNMENTS & SUBMISSIONS
model Assignment {
  id          String    @id @default(cuid())
  title       String
  description String
  dueDate     DateTime?
  courseId    String
  creatorId   String
  moduleId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  creator     User         @relation(fields: [creatorId], references: [id])
  submissions Submission[]
}

model Submission {
  id           String    @id @default(cuid())
  assignmentId String
  userId       String
  fileUrl      String?
  content      String?
  grade        Float?
  feedback     String?
  submittedAt  DateTime  @default(now())
  gradedAt     DateTime?

  // Relations
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// QUIZZES & ATTEMPTS
model Quiz {
  id           String   @id @default(cuid())
  title        String
  description  String?
  courseId     String
  moduleId     String?
  timeLimit    Int? // In minutes
  passingScore Float? // Percentage required to pass
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  course    Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module    Module?        @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  questions QuizQuestion[]
  attempts  QuizAttempt[]
}

model QuizQuestion {
  id            String       @id @default(cuid())
  quizId        String
  question      String
  type          QuestionType
  options       Json? // Array of options for MC questions
  correctAnswer String? // Can be index for MC or actual answer for others
  points        Int          @default(1)
  order         Int

  // Relations
  quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers QuizAnswer[]
}

model QuizAttempt {
  id          String    @id @default(cuid())
  quizId      String
  userId      String
  score       Float?
  startedAt   DateTime  @default(now())
  completedAt DateTime?

  // Relations
  quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers QuizAnswer[]
}

model QuizAnswer {
  id            String   @id @default(cuid())
  attemptId     String
  questionId    String
  userAnswer    String
  isCorrect     Boolean?
  pointsAwarded Float?

  // Relations
  attempt  QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
  FILE_UPLOAD
}

// FORUM
model ForumThread {
  id        String   @id @default(cuid())
  title     String
  content   String
  courseId  String
  authorId  String
  pinned    Boolean  @default(false)
  locked    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course  Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  author  User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  replies ForumReply[]
}

model ForumReply {
  id        String   @id @default(cuid())
  content   String
  threadId  String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  thread ForumThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  author User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

// CERTIFICATES
model Certificate {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  templateId String?
  pdf        String? // URL to PDF
  issueDate  DateTime @default(now())

  // Relations
  user     User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course               @relation(fields: [courseId], references: [id], onDelete: Cascade)
  template CertificateTemplate? @relation(fields: [templateId], references: [id])
}

model CertificateTemplate {
  id        String   @id @default(cuid())
  name      String
  template  Json // Template layout and design
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  certificates Certificate[]
}
